diff --git a/Sources/XcodeProj/Extensions/String+md5.swift b/Sources/XcodeProj/Extensions/String+md5.swift
index c1e7bc0..b45d210 100644
--- a/Sources/XcodeProj/Extensions/String+md5.swift
+++ b/Sources/XcodeProj/Extensions/String+md5.swift
@@ -21,28 +21,17 @@
  */
 
 import Foundation
+import XcodeProjCExt
 
 extension String {
     var md5: String {
-        if let data = data(using: .utf8, allowLossyConversion: true) {
-            let message = data.withUnsafeBytes { bufferPointer in
-                Array(UnsafeBufferPointer(
-                    start: bufferPointer.baseAddress?.assumingMemoryBound(to: UInt8.self),
-                    count: data.count
-                ))
-            }
-
-            let MD5Calculator = MD5(message)
-            let MD5Data = MD5Calculator.calculate()
-
-            var MD5String = String()
-            for c in MD5Data {
-                MD5String += String(format: "%02x", c)
-            }
-            return MD5String
-
-        } else {
-            return self
+        guard let data = data(using: .utf8, allowLossyConversion: true) else {
+            fatalError("Unable to get UTF-8 string from data")
+        }
+        return data.withUnsafeBytes { bufferPointer in
+            let castedBuffer = bufferPointer.bindMemory(to: Int8.self)
+            let hex = XCPComputeMD5(castedBuffer.baseAddress, Int32(data.count))!
+            return String(cString: hex, encoding: .ascii)!
         }
     }
 }
diff --git a/Sources/XcodeProj/Utils/CommentedString.swift b/Sources/XcodeProj/Utils/CommentedString.swift
index a77b7b9..6a1d4c8 100644
--- a/Sources/XcodeProj/Utils/CommentedString.swift
+++ b/Sources/XcodeProj/Utils/CommentedString.swift
@@ -1,4 +1,5 @@
 import Foundation
+import XcodeProjCExt
 
 /// String that includes a comment
 struct CommentedString {
@@ -43,31 +44,10 @@ struct CommentedString {
         default: break
         }
 
-        var escaped = string
-        // escape escape
-        if escaped.contains("\\" as Character) {
-            escaped = escaped.replacingOccurrences(of: "\\", with: "\\\\")
+        return string.withCString { buffer in
+            let esc = XCPEscapedString(buffer)!
+            return String(bytesNoCopy: UnsafeMutableRawPointer(mutating: esc), length: strlen(esc), encoding: .utf8, freeWhenDone: true)!
         }
-        // escape quotes
-        if escaped.contains("\"" as Character) {
-            escaped = escaped.replacingOccurrences(of: "\"", with: "\\\"")
-        }
-        // escape tab
-        if escaped.contains("\t" as Character) {
-            escaped = escaped.replacingOccurrences(of: "\t", with: "\\t")
-        }
-        // escape newlines
-        if escaped.contains("\n" as Character) {
-            escaped = escaped.replacingOccurrences(of: "\n", with: "\\n")
-        }
-
-        if !escaped.isQuoted,
-            escaped.rangeOfCharacter(from: CommentedString.invalidCharacters) != nil ||
-            invalidStrings.contains(where: { escaped.range(of: $0) != nil }) {
-            escaped = escaped.quoted
-        }
-
-        return escaped
     }
 }
 
